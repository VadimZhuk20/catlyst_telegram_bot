from aiogram import types
import keyboards.default as kb
import keyboards.inline as inl
import requests
import json
from data.config import KEY, USER_AGENT


r = requests.Session()
currency = ['', 'USD', 'EUR', 'RUB', 'UAH', 'BYN']


# –ü–æ–∏—Å–∫ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∞–≤—Ç–æ
async def get_cat(message, data, number):
    brands_id = await get_brand()
    for brand in brands_id:
        if data[0] == brand[1]:
            count = brand[0]
            break
    else:
        count = ''
    responce_brand = r.post(
        'https://debug.catalyst.by/json.php',
        data={
            'command': 'search',
            'phone': str(number[3]),
            'key': KEY,
            'currID': str(number[4]),
            'brand': str(count),
            'model': str(data[1]),
            'engtype': str(data[2]),
            'size': str(data[3]),
            'cattype': '',
            'serial': '',
            'yearFirst': str(data[4]),
            'yearLast': ''
        },
        headers=USER_AGENT
    )
    json_data = responce_brand.json()
    count = json.dumps(json_data["count"])
    total = list(json_data['Database'].values())
    out = list(json_data['user'].values())
    if int(count) >= 1:
        for number in range(0, int(count)):
            result = list(json_data[str(number)].values())
            currency = list(json_data['user'].values())
            await get_resault(message, result, currency)

    else:
        await message.answer(
            f'–î–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ, –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.\n'
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: \n'
            f'üì© @McConst', reply_markup=kb.greet_kb)
    await out_info(message, total, out)



async def get_catnumber(message: types.Message, data, number):
    global count
    if data[0] == '':
        count = ''
    else:
        brands_id = await get_brand()
        for brand in brands_id:
            if data[0] == brand[1]:
                count = brand[0]

    responce_brand = r.post('https://debug.catalyst.by/json.php',
                            data={
                                'command': 'search',
                                'phone': str(number[3]),
                                'key': KEY,
                                'currID': str(number[4]),
                                'brand': str(count),
                                'serial': str(data[1]),
                            },
                            headers=USER_AGENT
                            )

    json_data = responce_brand.json()
    count = json.dumps(json_data["count"])
    total = list(json_data['Database'].values())
    out = list(json_data['user'].values())
    if int(count) >= 1:
        for number in range(0, int(count)):
            result = list(json_data[str(number)].values())
            currency = list(json_data['user'].values())
            await get_resault(message, result, currency)

    else:
        await message.answer(
            f'–î–∞–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞, –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.\n'
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: \n'
            f'üì© @McConst', reply_markup=kb.greet_kb)
    await out_info(message, total, out)


#–ò–Ω—Ñ–æ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
async def history_search(message, number):
    responce_brand = r.post('https://debug.catalyst.by/json.php', data={'command': 'getUserData',
                                                                        'phone': str(number[3]),
                                                                        'key': KEY

                                                                        }, headers=USER_AGENT)
    json_data = responce_brand.json()
    result = list(json_data['user'].values())
    await message.answer(
        f'<b>–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:</b> {result[3]}.\n'
        f'<b>–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∏—Å–∫–æ–≤ –∑–∞ –¥–µ–Ω—å:</b> {result[4]}.\n'
        f'<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∏—Å–∫–æ–≤ –∑–∞ –¥–µ–Ω—å:</b> {result[5]}.\n'
        f'\n<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n{result[6]}.\n'
        f'\n<b>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b> \n{result[7]}.\n'
        f'\n<b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤</b>\n'
        f'<b>–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b> {result[8]}.\n',
        parse_mode='HTML',
        reply_markup=kb.cabinet_kb)
    await message.answer(
        f'<b>–í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–µ–Ω—ã:</b> {currency[int(number[4])]}',
        parse_mode='HTML',
        reply_markup=inl.inline_kb_val)


# –ü–æ–∏—Å–∫ id –∞–≤—Ç–æ
async def get_brand():
    responce_brand = r.post('https://debug.catalyst.by/json.php',
                            data={
                                'command': 'getBrandID',
                                'key': KEY},
                            headers=USER_AGENT)
    brand = []
    json_data = responce_brand.json()
    count = json.dumps(json_data["count"])
    for number in range(0, int(count)):
        result = list(json_data[str(number)].values())
        brand.append(result)
    return brand


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def search_bd(data, number, searchfield):
    global count, model, e_type
    if data[0] == '':
        count = ''
    else:
        brands_id = await get_brand()
        for brand in brands_id:
            if data[0] == brand[1]:
                count = brand[0]
    if len(data) == 1:
        model = ''
        e_type = ''
    elif len(data) == 2:
        model = data[1]
        e_type = ''
    elif len(data) == 3:
        e_type = data[2]
    responce_brand = r.post(f'https://debug.catalyst.by/serial.php?brand={count}&model={model}&engtype={e_type}'
                            f'&searchfield={searchfield}', data={'phone': str(number[3]),
                                                                 'key': KEY}, headers=USER_AGENT)
    json_data = responce_brand.json()
    base = []
    count = json.dumps(json_data["count"])
    if int(count) >= 1:
        result = list(json_data[f'{searchfield}'].values())
        for number in range(0, int(count)):
            if result[number] is None:
                continue
            else:
                base.append(result[number])
    return base


# –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
async def account(number):
    responce_brand = r.post('https://debug.catalyst.by/json.php', data={'command': 'getAccountLink',
                                                                        'phone': str(number[3]),
                                                                        'key': KEY}, headers=USER_AGENT)
    json_data = responce_brand.json()
    url = json.dumps(json_data["url"])
    return url


# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
async def get_resault(message, result, currency):
    global photo
    try:
        if result[5] is None:
            if 'g' in result[2]:
                result[2] = '–ë–µ–Ω–∑–∏–Ω'
            elif 'd' in result[2]:
                result[2] = '–î–∏–∑–µ–ª—å'
            else:
                result[2] = ''
            if result[13] is None:
                photo_jpg = '-'
                photo = "–§–æ—Ç–æ: - ."
            else:
                photo_jpg = f'https://catalyst.by/img/{result[13]}'
                photo = '–§–æ—Ç–æ:'
            if result[14] is None:
                result[14] = '-'
            if result[7] is None:
                result[7] = '-'
            return await message.answer(
                f'<b>–ú–∞—Ä–∫–∞:</b> {result[0]}. '
                f'<b>–ú–æ–¥–µ–ª—å:</b> {result[1]}.\n'
                f'<b>–î–í–°:</b> {result[3]} {result[2]}. '
                f'<b>–í–µ—Å:</b> {result[8]}–∫–≥.\n'
                f'<b>–ù–æ–º–µ—Ä CAT:</b> {result[7]}.\n'
                f'<b>–¶–µ–Ω–∞ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:</b> {result[11]} {currency[11]}\n'
                f'<b>–¢–∏–ø –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:</b> {result[9]}.\n'
                f'<b>–ì–æ–¥:</b> - . '
                f'<a href="{photo_jpg}"><b>{photo}</b></a>\n'
                f'<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {result[14]}',
                parse_mode='HTML',
                reply_markup=kb.greet_kb
            )
        elif result[6] is None:
            if 'g' in result[2]:
                result[2] = '–ë–µ–Ω–∑–∏–Ω'
            elif 'd' in result[2]:
                result[2] = '–î–∏–∑–µ–ª—å'
            else:
                result[2] = ''
            if result[13] is None:
                photo_jpg = '-'
                photo = "–§–æ—Ç–æ: - ."
            else:
                photo_jpg = f'https://catalyst.by/img/{result[13]}'
                photo = '–§–æ—Ç–æ:'
            if result[14] is None:
                result[14] = '-'
            if result[7] is None:
                result[7] = '-'
            return await message.answer(
                    f"<b>–ú–∞—Ä–∫–∞:</b> {result[0]}. "
                    f'<b>–ú–æ–¥–µ–ª—å:</b> {result[1]}.\n'
                    f'<b>–î–í–°:</b> {result[3]} {result[2]}. '
                    f'<b>–í–µ—Å:</b> {result[8]}–∫–≥.\n'
                    f'<b>–ù–æ–º–µ—Ä CAT:</b> {result[7]}.\n'
                    f'<b>–¶–µ–Ω–∞ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:</b> {result[11]} {currency[11]}\n'
                    f'<b>–¢–∏–ø –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:</b> {result[9]}.\n'
                    f'<b>–ì–æ–¥:</b> {result[5]}. '
                    f'<a href="{photo_jpg}"><b>{photo}</b></a>\n'
                    f'<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {result[14]}',
                    parse_mode='HTML',
                    reply_markup=kb.greet_kb
                )
        else:
            if 'g' in result[2]:
                result[2] = '–ë–µ–Ω–∑–∏–Ω'
            elif 'd' in result[2]:
                result[2] = '–î–∏–∑–µ–ª—å'
            else:
                result[2] = ''
            if result[13] is None:
                photo_jpg = '-'
                photo = "–§–æ—Ç–æ: - ."
            else:
                photo_jpg = f'https://catalyst.by/img/{result[13]}'
                photo = '–§–æ—Ç–æ:'
            if result[14] is None:
                result[14] = '-'
            if result[7] is None:
                result[7] = '-'
            return await message.answer(
                f'<b>–ú–∞—Ä–∫–∞:</b> {result[0]}. '
                f'<b>–ú–æ–¥–µ–ª—å:</b> {result[1]}.\n'
                f'<b>–î–í–°:</b> {result[3]} {result[2]}. '
                f'<b>–í–µ—Å:</b> {result[8]}–∫–≥.\n'
                f'<b>–ù–æ–º–µ—Ä CAT:</b> {result[7]}.\n'
                f'<b>–¶–µ–Ω–∞ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:</b> {result[11]} {currency[11]}\n'
                f'<b>–¢–∏–ø –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:</b> {result[9]}.\n'
                f'<b>–ì–æ–¥:</b> {result[5]}-{result[6]}. '
                f'<a href="{photo_jpg}"><b>{photo}</b></a>\n'
                f'<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {result[14]}',
                parse_mode='HTML',
                reply_markup=kb.greet_kb
            )
    except:
        pass


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
async def out_info(message, total, out):
    global subscribe

    if total[0] == total[1]:
        subscribe = '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏.'
    elif total[1] < total[0] and out[3] != 'Guest':
        subscribe = '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n' \
                    '–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.'
    if out[3] == 'Guest':
        subscribe = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.'

    await message.answer(
        f'–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è\n'
        f'–ø–æ {total[1]} –ø–æ–∑–∏—Ü–∏–π –∏–∑ {total[0]}\n'
        f'{subscribe}'
    )



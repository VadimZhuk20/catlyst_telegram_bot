from aiogram.types import ContentType
from data.config import ADMINS
from aiogram import executor
from states.states import Test
from aiogram.dispatcher import FSMContext
from utils.db_api.subscriber import SQLighter
from loader import *
from utils.db_api.search_bd import *
from utils.redis.post import *


data = []
db = SQLighter()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.chat.id in ADMINS:
        await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ,{0.full_name}!\n'
                                                     '–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:'
                               .format(
            message.from_user), reply_markup=kb.admins_kb)

    else:
        if not db.subscriber_exists(message.from_user.id):
            await bot.send_message(message.from_user.id, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {0.full_name}!\n'
                                                         '–ú—ã –º–æ–ª–æ–¥–æ–π –ø—Ä–æ–µ–∫—Ç –∏ —Ö–æ—Ç–∏–º –ø–æ–º–æ—á—å –ª—é–¥—è–º –Ω–∞–π—Ç–∏'
                                                         ' –ª—É—á—à–∏–µ —Ü–µ–Ω—ã, –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä—ã. ‚Ñ¢\n'
                                                         '–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.üìú\n'

                                                         '\n–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚úî:'
                                   .format(
                message.from_user),
                                   reply_markup=kb.subscribe_kb()
                                   )

            # –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            @dp.message_handler(lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚úî')
            async def subscribe(message: types.Message):
                if not db.subscriber_exists(message.from_user.id):
                    db.add_subscriber(message.from_user.id, message.from_user.username, '5')

                await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû',
                                     reply_markup=kb.registration_kb)
                await Test.Phone.set()

            @dp.message_handler(lambda message: message.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
            async def subscribe(message: types.Message):
                if db.subscriber_exists(message.from_user.id):
                    db.un_subscriber(message.from_user.id)

                await message.answer(
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!")
        else:
            await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, {0.full_name}!\n'

                                                         '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
                                   .format(
                message.from_user), reply_markup=kb.greet_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(lambda message: message.text == '–ü–æ–¥–ø–∏—Å–∫–∞ ‚úî')
async def subscribers(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:'
                           .format(
        message.from_user), reply_markup=kb.exit_kb)

    # –ö–Ω–æ–ø–∫–∞ –ü–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∞
    @dp.message_handler(lambda message: message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ')
    async def subscribe(message: types.Message):
        number = await get_number(message.from_user.id)
        acc = await account(number)
        acc.replace('"', '')
        href = f'<a href={acc}>–û–ø–ª–∞—Ç–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>'
        await message.answer(
            href,
            parse_mode='HTML',
            reply_markup=inl.inline_kb1)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    @dp.callback_query_handler(lambda c: c.data == 'button1')
    async def process_callback_paid(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.greet_kb)

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø–∏—Å–∫–∏
    @dp.message_handler(lambda message: message.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üÜë")
    async def subscribe(message: types.Message):
        if message.from_user.id in ADMINS:
            await message.answer('–†–µ—à–∏–ª –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?\n'
                                 '–î–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞–π !', reply_markup=kb.admins_kb)
        else:
            await message.answer(
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=kb.unsubscribe_kb)

            @dp.message_handler(lambda message: message.text == "–î–∞")
            async def subscribe(message: types.Message):
                await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!')
                db.un_subscriber(message.from_user.id)

            @dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ôªÔ∏è")
            async def subscribe(message: types.Message):
                await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.greet_kb)

    @dp.message_handler(lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ôªÔ∏è')
    async def subscribers(message: types.Message):
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
                               .format(
            message.from_user), reply_markup=kb.greet_kb)


async def cabbinet(message: types.Message):
    number = get_number(message.from_user.id)
    catlyst = await account(number)
    return catlyst


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–º–µ—Ä –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda message: message.text == '–¶–µ–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É üìù')
async def button_number(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ:',
                           reply_markup=kb.brand_kb)
    await Test.Brand_number.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–¥–∞—Ç—å –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä
@dp.message_handler(lambda message: message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã üóÉÔ∏è')
async def button_pass(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ü—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤:\n'
                           '–£–ü "–£–ù–ò–î–†–ê–ì–ú–ï–¢ –ë–ì–£"\n'
                           '–≥.–ú–∏–Ω—Å–∫, —É–ª.A–∫–∞–¥–µ–º–∏–∫–∞ –ö—É—Ä—á–∞—Ç–æ–≤–∞, 1\n'
                           '\n–ü—Ä–∏–µ–º–Ω–∞—è:\n'
                           '+375 (17) 398-38-81 (unidragmet@tut.by)\n'
                           '\n–û—Ç–¥–µ–ª –∞–≤—Ç–æ–∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤:\n'
                           '(Telegram,Viber,WhatsApp):\n'
                           '+375291868018 (tarazevich@bsu.by)\n'
                           '\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n'
                           'Viber/WhatsApp/Telegram:\n'
                           '+375257205113\n'
                           'e-mail: mycatalyst@yandex.ru\n',
                           reply_markup=kb.greet_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ü–µ–Ω–∞ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ
@dp.message_handler(lambda message: message.text == '–¶–µ–Ω–∞ –ø–æ –º–∞—Ä–∫–µ üöó')
async def button_brand(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ:",
                         reply_markup=kb.brand_kb)
    await Test.Brand.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message_handler(lambda message: message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üîî')
async def button_pass(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: üì©  @McConst',
                           reply_markup=kb.greet_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
@dp.message_handler(lambda message: message.text == '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ üë•')
async def button_subscribers(message: types.Message):
    await get_subscriptions(message)


# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –±–æ—Ç–∞
@dp.message_handler(lambda message: message.text == '–†–∞—Å—Å—ã–ª–∫–∞ üì©')
async def button_mail(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
                         reply_markup=inl.inline_kb1)
    await Test.Message.set()


# –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@dp.message_handler(lambda message: message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üö™')
async def button_personal_area(message: types.Message):
    number = await get_number(message.from_user.id)
    await history_search(message, number)

    @dp.callback_query_handler(lambda c: c.data == 'RUB')
    async def process_callback_rub(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        db.update_currency(callback_query.from_user.id, '3')
        number = await get_number(message.from_user.id)
        await message.answer(f'–í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–µ–Ω—ã: {currency[int(number[4])]}')

    @dp.callback_query_handler(lambda c: c.data == 'EUR')
    async def process_callback_eur(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        db.update_currency(callback_query.from_user.id, '2')
        number = await get_number(message.from_user.id)
        await message.answer(f'–í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–µ–Ω—ã: {currency[int(number[4])]}')

    @dp.callback_query_handler(lambda c: c.data == 'BYN')
    async def process_callback_byn(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        db.update_currency(callback_query.from_user.id, '5')
        number = await get_number(message.from_user.id)
        await message.answer(f'–í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–µ–Ω—ã: {currency[int(number[4])]}')

    @dp.callback_query_handler(lambda c: c.data == 'USD')
    async def process_callback_usd(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        db.update_currency(callback_query.from_user.id, '1')
        number = await get_number(message.from_user.id)
        await message.answer(f'–í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–µ–Ω—ã: {currency[int(number[4])]}')

    @dp.callback_query_handler(lambda c: c.data == 'UAH')
    async def process_callback_uah(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)
        db.update_currency(callback_query.from_user.id, '4')
        number = await get_number(message.from_user.id)
        await message.answer(f'–í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–µ–Ω—ã: {currency[int(number[4])]}')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @dp.message_handler(lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ôªÔ∏è')
    async def button_brand(message: types.Message):
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=kb.greet_kb)


# –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda message: message.text == '–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üì≤')
async def button_pass(message: types.Message):
    await bot.send_message(message.from_user.id, "–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                           reply_markup=kb.greet_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Brand)
async def process_callback_button1(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id in ADMINS:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                               reply_markup=kb.greet_kb)
        await state.finish()
        data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Year)
async def process_callback_button2(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                           reply_markup=kb.greet_kb)
    await state.finish()
    data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Engine)
async def process_callback_button3(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                           reply_markup=kb.greet_kb)
    await state.finish()
    data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Type)
async def process_callback_button4(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                           reply_markup=kb.greet_kb)
    await state.finish()
    data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Number)
async def process_callback_button4(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.greet_kb)
    await state.finish()
    data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Type)
async def process_callback_button4(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.greet_kb)
    await state.finish()
    data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Model)
async def process_callback_button4(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.greet_kb)
    await state.finish()
    data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Engine)
async def process_callback_button4(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.greet_kb)
    await state.finish()
    data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Year)
async def process_callback_button4(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.greet_kb)
    await state.finish()
    data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data == 'button2', state=Test.Model)
async def process_callback_button4(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –î–í–°:',
                           reply_markup=kb.type_kb)
    data.append('')
    await Test.Type.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data == 'button2', state=Test.Engine)
async def process_callback_button5(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ì–æ–¥ –∞–≤—Ç–æ: 1999, 2005, 2018...',
                           reply_markup=inl.inline_next
                           )
    data.append('')
    await Test.Year.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data == 'button2', state=Test.Year)
async def process_callback_button6(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    data.append('')
    if data[2] == 'g':
        type_dvs = '–ë–µ–Ω–∑–∏–Ω'
    elif data[2] == 'd':
        type_dvs = '–î–∏–∑–µ–ª—å'
    else:
        type_dvs = ''
    await bot.send_message(callback_query.from_user.id, f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n'
                                                        f'{data[0]}/ {data[1]}/ {type_dvs}/ {data[3]}/ {data[4]}\n'
                                                        f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:',
                           reply_markup=kb.greet_kb)
    await state.finish()
    number = await get_number(callback_query.from_user.id)
    await get_cat(callback_query.message, data, number)
    data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'button1', state=Test.Message)
async def process_callback_button4(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.admins_kb)
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'registration', state=Test.Phone)
async def process_callback_button2(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –≤ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'button3')
async def process_callback_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                           reply_markup=kb.greet_kb)


# –ü–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–±–æ—Ä –º–∞—Ä–∫–∏ –∞–≤—Ç–æ)
@dp.message_handler(state=Test.Brand)
async def answer_brand(message: types.Message, state: FSMContext):
    answer = message.text
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ôªÔ∏è':
        await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                             reply_markup=kb.greet_kb)
        await state.finish()
    elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ôªÔ∏è':
        data.append('')
        searchfield = 'model'
        number = await get_number(message.from_user.id)
        examination = await search_bd(data, number, searchfield)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:\n"
                             f"\n–ü—Ä–∏–º–µ—Ä:\n"
                             f"{examination}\n"
                             f"\n–õ–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä.",
                             reply_markup=inl.inline_next)
        await Test.next()
    else:
        brands = []
        brands_id = await get_brand()
        for brand in brands_id:
            brands.append(brand[1])
        if answer in brands:
            data.append(answer)
            searchfield = 'model'
            number = await get_number(message.from_user.id)
            examination = await search_bd(data, number, searchfield)
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:\n"
                                 f"\n–ü—Ä–∏–º–µ—Ä:\n"
                                 f"{examination}\n"
                                 f"\n–õ–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä.",
                                 reply_markup=inl.inline_next)
            await Test.next()
        else:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ', reply_markup=kb.brand_kb)


# –í—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –º–æ–¥–µ–ª–∏(–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
@dp.message_handler(state=Test.Model)
async def answer_year(message: types.Message):
    # await message.answer('k', reply_markup=kb.inline_next)
    answer = message.text
    data.append(answer)
    searchfield = 'engine_size'
    number = await get_number(message.from_user.id)
    examination = await search_bd(data, number, searchfield)
    if len(examination) >= 1:
        await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –î–í–°:', reply_markup=kb.type_kb)
        await Test.next()
    else:
        await message.answer('–¢–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ.')
        data.pop(1)


# –¢—Ä–µ—Ç—å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–≤—Å)
@dp.message_handler(state=Test.Type)
async def answer_type(message: types.Message):
    answer = message.text
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ôªÔ∏è':
        data.append(' ')
        await message.answer('–û–±—ä—ë–º –¥–≤—Å: 1.5, 1.8, 2.0...',
                             reply_markup=inl.inline_next)
        await Test.next()
    else:
        if answer == '–ë–µ–Ω–∑–∏–Ω':
            data.append('g')
            searchfield = 'engine_size'
            number = await get_number(message.from_user.id)
            examination = await search_bd(data, number, searchfield)
            if len(examination) >= 1:
                await message.answer(f'–ü—Ä–∏–º–µ—Ä –î–í–°:{examination}',
                                     reply_markup=inl.inline_next)
                await Test.next()
            else:
                await message.answer(f'–ü—Ä–∏–º–µ—Ä: 1.6, 2.0, 2.5...',
                                     reply_markup=inl.inline_next)
                await Test.next()

        elif answer == '–î–∏–∑–µ–ª—å':
            data.append('d')
            searchfield = 'engine_size'
            number = await get_number(message.from_user.id)
            examination = await search_bd(data, number, searchfield)
            if len(examination) >= 1:
                await message.answer(f'–ü—Ä–∏–º–µ—Ä –î–í–°:{examination}',
                                     reply_markup=inl.inline_next)
                await Test.next()
            else:
                await message.answer(f'–ü—Ä–∏–º–µ—Ä: 1.6, 2.0, 2.5...',
                                     reply_markup=inl.inline_next)
                await Test.next()
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–≤—Ç–æ!', reply_markup=kb.type_kb)


# –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –¥–≤—Å)
@dp.message_handler(state=Test.Engine)
async def answer_engine(message: types.Message):
    answer = message.text
    if answer.count('.') == 1:
        data.append(answer)
        await message.answer("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ.\n"
                             "(–ü—Ä–∏–º–µ—Ä:1990, 2005, 2017...):",
                             reply_markup=inl.inline_next)
        await Test.next()
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äº')


# –ü—è—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–≤–æ–¥ –≥–æ–¥–∞ –∞–≤—Ç–æ)
@dp.message_handler(state=Test.Year)
async def answer_year(message: types.Message, state: FSMContext):
    answer = message.text
    if answer.isalnum() and len(answer) == 4:
        data.append(answer)
        if data[2] == 'g':
            type_dvs = '–ë–µ–Ω–∑–∏–Ω'
        else:
            type_dvs = '–î–∏–∑–µ–ª—å'
        await message.answer(f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n'
                             f'{data[0]} / {data[1]} / {type_dvs} / {data[3]} / {data[4]}\n'
                             f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:',
                             reply_markup=kb.greet_kb)
        await state.finish()
        number = await get_number(message.from_user.id)
        await get_cat(message, data, number)

        data.clear()

    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äº')


# –ü–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É)(–í—ã–±–æ—Ä –ë—Ä—ç–Ω–¥–∞)
@dp.message_handler(state=Test.Brand_number)
async def answer_number(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ôªÔ∏è':
        await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                             reply_markup=kb.greet_kb)
        await state.finish()
    elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ôªÔ∏è':
        data.append('')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ üî¢:')
        await Test.next()
    else:
        answer = message.text
        brands = []
        brands_id = await get_brand()
        for brand in brands_id:
            brands.append(brand[1])
        if answer in brands:
            data.append(answer)
            searchfield = 'serial'
            number = await get_number(message.from_user.id)
            examination = await search_bd(data, number, searchfield)
            if len(examination) >= 1:
                await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ üî¢:\n'
                                     f'\n–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ {examination}')
                await Test.next()
            else:
                await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ üî¢:')
                await Test.next()
        else:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ', reply_markup=kb.brand_kb)


# –í—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É)(–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç)
@dp.message_handler(state=Test.Number)
async def answer_number(message: types.Message, state: FSMContext):
    answer = message.text
    data.append(answer)
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n'
                         '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', reply_markup=kb.greet_kb)

    number = await get_number(message.from_user.id)
    await get_catnumber(message, data, number)
    await state.finish()
    data.clear()


# –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['photo'], state=Test.Message)
async def answer_message(message: types.Message, state: FSMContext):
    photo_id = message.photo[0].file_id
    subscribers = await subscriptions()
    for subscriber in subscribers:
        if subscriber[1] in ADMINS:
            await bot.send_photo(subscriber[1], photo_id, reply_markup=kb.admins_kb)
        else:
            await bot.send_message(subscriber[1], photo_id)

    await state.finish()


# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
@dp.message_handler(state=Test.Message)
async def answer_message(message: types.Message, state: FSMContext):
    answer = message.text
    subscribers = await subscriptions()
    for subscriber in subscribers:
        if subscriber[1] in ADMINS:
            await bot.send_message(subscriber[1], answer, reply_markup=kb.admins_kb)
        else:
            await bot.send_message(subscriber[1], answer)

    await state.finish()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=Test.Phone, content_types=ContentType.CONTACT)
async def phone(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number

    await state.finish()
    db.update_sub_number(message.from_user.id, phone_number)
    await bot.send_message(message.from_user.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ \n'
                                                 '–≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —Å–∞–π—Ç–∞ üì≤\n'
                                                 '–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n'
                                                 '–Ω–∞ —Å–∞–π—Ç–µ üì±\n'
                                                 '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
                           reply_markup=inl.inline_kb_registration)


if __name__ == '__main__':
    executor.start_polling(dp)
